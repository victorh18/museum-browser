stages:
  - test
  - build
  - deploy

test_stage:
  stage: test
  image: localhost:1500/node-chrome:latest
  before_script:
    - export CHROME_BIN=/usr/bin/google-chrome
    - npm ci

  script:
    - echo "Starting tests in $CI_COMMIT_BRANCH..."
    - npm run test:ci
    - echo "Tests ended..."
  
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'

build_qa:
  stage: build
  script:
    - echo "Starting build of $CI_COMMIT_BRANCH image"
    - docker build -t localhost:1500/museum-browser:$CI_COMMIT_SHORT_SHA .
    - docker build -t localhost:1500/museum-browser:$CI_COMMIT_BRANCH .

  rules:
    - if: $CI_COMMIT_BRANCH == 'qa'

deploy_qa:
  stage: deploy
  script:
    - echo "Deploying app to $CI_COMMIT_BRANCH"
    - docker push localhost:1500/museum-browser:$CI_COMMIT_SHORT_SHA
    - docker push localhost:1500/museum-browser:$CI_COMMIT_BRANCH
    - docker compose -f docker-compose.qa.yml up -d
  rules:
    - if: $CI_COMMIT_BRANCH == 'qa'

build_prod:
  stage: build
  script:
    - echo "Starting build of production image version $CI_COMMIT_TAG"
    - docker build -t localhost:1500/museum-browser:$CI_COMMIT_TAG .
    - docker build -t localhost:1500/museum-browser:latest .
  only:
    - tags

deploy_prod:
  stage: deploy
  script:
    - echo "Deploying app to production as version $CI_COMMIT_TAG"
    - docker push localhost:1500/museum-browser:$CI_COMMIT_TAG
    - docker push localhost:1500/museum-browser:latest
    - docker compose -f docker-compose.yml up -d
  only:
    - tags
